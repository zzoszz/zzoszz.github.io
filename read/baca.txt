github
- buka: github.com > sign in/ sign up; isi data bebas saja lalu submit; verifikasi email.
- boleh edit profil dulu atau mulai project. Repository
- new repository: isi apa saja; centang readme lalu create.
Di repository akan ada file README.md, lalu buatlah file baru
- file > new file
git
* buka: git bash atau terminal di vs code
- Perintah penting
--- pwd (print working directory) mengetahui di mana posisi sekarang
--- clear (hapus isi terminal)
--- cd (chage directory) cd .. (keluar folder) cd folder (masuk folder) cd folder/folder (masuk folder masuk lagi)
--- ls (list) melihat isi folder
--- !q! (jika terjadi error) !wq! (menyimpan jika terjadi error)
- Perintah git yang biasa
--- git init (membuat folder jadi repository)
- saat folder jadi repository, kenali tiga area (working tree; staging area; history)
- saat menambah file baru atau mengubah file lama maka di working tree,
--- git status
--- git add nama-file (menambah file baru ke staging area) git add . (menambah semua file)
--- git commit -m 'pesan commit' (file masuk ke history)
--- git commit -am 'pesan commit' (file di staging area masuk ke history)
- menambah/menghapus/edit, taruh di staging area dengan git add ...
--- git log (melihat history) git log -3 (3 history terakhir) git log --style.css (history spesifik pada file style.css)
--- git checkout <5digitHash> (pindah ke hash yang dituju);
* git branching
- saat mengubah file jadi repository, file tersebut menjadi branch master/main 
--- git branch branch-baru (membuat branch baru)
--- git branch (melihat semua branch yang ada)
--- git log (history, head(pointer) mengarah ke master)
--- git log --all --decorate --oneline --graph (gunakan)
--- alias singkat= 'git log --all --decorate --oneline --graph' (jika memanggil singkat maka sama saja memanggil yang panjang)
--- git checkout branch-baru (pindahkah head(pointer) ke branch-baru)
* git merging
- (fast forward tidak ada conflict)
- jika ingin merge branch-baru dengan master maka pointer harus di master, maka akan menyatu
- setelah merge, branch-baru bisa dihapus:
--- git branch -d branch-baru
- (three way merge ada conflict)
- conflict terjadi jika satu file diedit mirip, mengatasinya hanya dengan cara manual
* git remote
** kasus pertama, buat file di local lalu simpan ke github
- buat folder di mana saja, buka dengan terminal atau git bash atau bisa dengan cara berikut
--- mkdir directory-baru
--- cd directory-baru
--- git init
- buat file bebas (ada index.html) nya di derectory-baru 
- buka github; buat repository nama bebas, tanpa isi, akan ada jendela pilihan, lihat ke paling bawah lalu copas
--- git remote add origin https://github.com/nama-repo/remote-local.git
--- git remote
--- git remote -v
--- git push -u origin master
- selanjutnya untuk upload cukup:
--- git push
** kasus kedua, buat file di github lalu simpan juga di local 
- buat repository baru di github berisi readme.md atau isi sendiri
- buat fole juga di local, lalu buka di git bash atau terminal
- (di github) code > clone > copy http-nya
- (di git bash / terminal ) --- git clone paste http-nya
--- cd nama-repo
--- git remote
--- git -v (ada dua origin: fetch dan push)
--- git status (your branch is up to date with 'origin/master')
- coba buat file baru lalu add, commit
--- git push
- jika ingin dengan aku lain, rubah dulu akunnya dengan cara configurasi berikut:
--- git config --list (melihat data akun saat ini)
--- git config --global (atau --local) user.name 'nama-user'
--- git config --list (lihat perubahan dengan sebelumnya)
- coba buat file baru lalu
--- git push
** kasus ketiga, di github sudah ada, di local sudah ada
--- git add . --- git commit
--- git push (gagal) maka,
--- git fetch (mengecek repo yang ada di github)
--- git status (mengecek repo yang ada di lokal)
--- graph (ternyata membuat cabang)
--- git pull (akan ada merge conflict)
--- conflictnya otomatis terbuka di code editor, tinggal dibuang yang tidak perlu dan markernya
--- git status --- git add. --- git commit -m 'pesan commit' --- git status
--- git push